                                                                         BRUTE FORCE:
class Solution {
    public int[] nextGreaterElement(int[] nums1, int[] nums2) {
        int n1 = nums1.length;
        int n2 = nums2.length;
        int ans[] = new int[n1];
        for (int i = 0; i < n1; i++) {
            int val = nums1[i];
            int pos = -1;
            for (int j = 0; j < n2; j++) {
                if (nums2[j] == val) {
                    pos = j;
                    break;
                }
            }

            int nge = -1;
            for (int k = pos + 1; k < n2; k++) {
                if (val < nums2[k]) {
                    nge = nums2[k];
                    break;
                }
            }
            ans[i] = nge;

        }
        return ans;
    }
}  
                                                                   Optimal Solution:
class Solution {
    public int[] nextGreaterElement(int[] nums1, int[] nums2) {
        Map<Integer, Integer> map = new HashMap<>(); // num -> next greater
        Stack<Integer> st = new Stack<>();

        for (int num : nums2) {
            while (!st.isEmpty() && st.peek() < num) {
                map.put(st.pop(), num);
            }
            st.push(num);
        }
        int[] ans = new int[nums1.length];
        for (int i = 0; i < nums1.length; i++) {
            ans[i] = map.getOrDefault(nums1[i], -1);
        }
        return ans;
    }

    
}
