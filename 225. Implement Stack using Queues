import java.util.LinkedList;
import java.util.Queue;

class MyStack {

    private Queue<Integer> q;

    public MyStack() {
        q = new LinkedList<>();
    }

    public void push(int x) {
        int s = q.size();
        q.offer(x); // add element
        for (int i = 0; i < s; i++) {
            q.offer(q.poll()); // rotate queue
        }
    }

    public int pop() {
        return q.poll(); // remove top element
    }

    public int top() {
        return q.peek(); // get top element without removing
    }

    public boolean empty() {
        return q.isEmpty();
    }
}


we can ude ArrayDeqeue :
import java.util.LinkedList;
import java.util.Queue;

class MyStack {

    private Queue<Integer> q;

    public MyStack() {
        q = new ArrayDeque<>();
    }

    public void push(int x) {
        int s = q.size();
        q.offer(x); // add element
        for (int i = 0; i < s; i++) {
            q.offer(q.poll()); // rotate queue
        }
    }

    public int pop() {
        return q.poll(); // remove top element
    }

    public int top() {
        return q.peek(); // get top element without removing
    }

    public boolean empty() {
        return q.isEmpty();
    }
}

